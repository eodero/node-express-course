1. In this lesson, you created a middleware function called asyncWrapper. Why?
 - due to the repetitive line of code, async wrapper provides for a more organized way of handling async functions and also applies the good practice of 'DRY' 

2. Suppose that you want to make sure that both a status code and and error message are send back to the user when they request  the URL for a task that does not exist. Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. Complete the code: 

const getTask = asyncWrapper(async (req, res, next) => {
  const { id: taskID } = req.params;
  const task = await Task.findOne({ _id: taskID });
  if (!task) {
    return next(customAPIError({ err.message }, 404));
  }
  }
  res.status(200).json({ task });
});